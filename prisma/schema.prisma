generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]

    // Personal Information
    location       String?
    linkedinUrl    String?
    githubUrl      String?
    bio            String?
    discTestResult String?

    // Professional Overview
    jobTitle         String?
    jobRoleFamily    JobRoleFamily    @default(Other)
    employmentStatus EmploymentStatus @default(Freelance)
    workMode         WorkMode         @default(Hybrid)
    availability     String?
    currentCompany   String?

    // Work Experience and Education
    workExperiences WorkExperience[]
    education       Education[]

    // Skills
    technicalSkills TechnicalSkills[]
    softSkills      SoftSkills[]

    // Job and Tandem Preferences
    jobPreferences    JobPreference?
    tandemPreferences TandemPreference?

    // Projects & Portfolio
    projects Project[]

    // References and Additional Information
    references     Reference[]
    additionalInfo AdditionalInfo?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TechnicalSkills {
    id     Int    @id @default(autoincrement())
    name   String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model SoftSkills {
    id     Int    @id @default(autoincrement())
    name   String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model WorkExperience {
    id          Int     @id @default(autoincrement())
    jobTitle    String
    companyName String
    startDate   String
    endDate     String?
    user        User    @relation(fields: [userId], references: [id])
    userId      String
}

model Education {
    id             Int     @id @default(autoincrement())
    degree         String
    fieldOfStudy   String
    institution    String
    graduationYear String?
    user           User    @relation(fields: [userId], references: [id])
    userId         String
}

model JobPreference {
    id             Int              @id @default(autoincrement())
    role           Roles[]
    workPreference WorkPreference[]
    industry       Industry[]
    user           User             @relation(fields: [userId], references: [id])
    userId         String           @unique
}

model TandemPreference {
    id                  Int      @id @default(autoincrement())
    idealPartnerRole    Roles[]
    complementarySkills String[]
    user                User     @relation(fields: [userId], references: [id])
    userId              String   @unique
}

// PROJECT PRISMA SCHEMA
model Project {
    id           Int     @id @default(autoincrement())
    title        String
    role         String
    description  String
    link         String?
    projectImage String // Store links to project files/images
    user         User    @relation(fields: [userId], references: [id])
    userId       String
}

model Reference {
    id           Int    @id @default(autoincrement())
    name         String
    relationship String
    company      String
    contactInfo  String
    user         User   @relation(fields: [userId], references: [id])
    userId       String
}

// PRISMA MODEL FOR ADDITIONAL INFORMATION
model AdditionalInfo {
    id                    Int      @id @default(autoincrement())
    hobbiesAndInterests   String[]
    volunteering          String?
    languages             Json
    preferredWorkSchedule String
    user                  User     @relation(fields: [userId], references: [id])
    userId                String   @unique
}

// Enums for predefined options
enum EmploymentStatus {
    Freelance
    FullTime
    PartTime
    OpenToOpportunities
}

enum Availability {
    OneMonth
    ThreeMonths
    SixMonths
}

enum JobRoleFamily {
    SoftwareDevelopment
    Data
    Fintech
    Design
    SalesMarketing
    ProductManagment
    ScrumMaster
    Other
}

enum WorkMode {
    Hybrid
    Remote
    Onsite
}

enum WorkPreference {
    FullTime
    PartTime
    JobSharing
    Hybrid
    Remote
}

enum Industry {
    IT
    Media
    Education
    Health
    Finance
    Retail
    Other
}

enum Roles {
    FrontendDeveloper
    BackendDeveloper
    FullstackDeveloper
    MobileDeveloper
    Designer
    ProductManager
    DataScientist
    DevOpsEngineer
    QAEngineer
    SoftwareEngineer
    Other
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}
